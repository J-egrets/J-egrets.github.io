<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++的字符及字符串简记</title>
      <link href="/2021/08/15/c-%E7%9A%84%E5%AD%97%E7%AC%A6%E5%8F%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%80%E8%AE%B0/"/>
      <url>/2021/08/15/c-%E7%9A%84%E5%AD%97%E7%AC%A6%E5%8F%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h1><p>字符常量：用单撇号括起来的==一个==<strong>字符</strong>就是字符常量。（注意是一个）</p><p>如：**’A’，’a’，’1’，’2’。**</p><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p>转义字符是一种特殊的字符，他有两个或多个字符组成，但是他只代表一个字符。</p><p>编译系统在见到字符“\”后，==会接着找他后面的字符==，并且把它处理成一个字符，在内存中只占一个字节。</p><p>转义字符’ \ ‘代表的反斜杠” \ “，转义字符” \’ “代表的字符” ‘ “和转义字符’ &quot; ‘代表的字符’＂’，其本身就是可显示字符，为什么还要对它转义呢?</p><p>这是因为它们的原有的字符形式已==作它用==，其中，单引号用作<strong>区分字符常量的括号</strong>，双引号用作<strong>区分字符串的括号</strong>，而反斜杠本身已用来<strong>表示转义字符的开头</strong>，因此必须对它们用转义字符重新声明。</p><p>转义字符注意点：<br>1)转义字符中只能使用小写字母，每个转义字符只能看作一个字符。<br>如：<strong>\n</strong>(换行), <strong>\t</strong>(制表符), <strong>\a</strong>(响铃，你的电脑会叫一声), <strong>\0</strong>(空字符)，以上只能小写，还有的如“\101”(字母A)，这则是八进制的方法，还有16进制的，如果需要请自行查找</p><p>2)\v垂直制表和\f换页符对<strong>屏幕</strong>（你的小黑框）没有任何影响，但会影响打印机执行响应操作。</p><p>4)转义字符’\0’表示空字符<strong>NULL</strong>，它的值是<strong>0</strong>。而字符’0’的ASCII码值是48。因此，空字符’\0’不是字符0。另外，空字符不等于空格字符，空格字符的ASCII码值为32而不是0。</p><p>5)如果反斜线之后的字符和它不构成转义字符，则’\’不起转义作用将被<strong>忽略</strong>。<br>如：你输出“\c”,”\A”，最后只会出来”c”和“A”。</p><p>6）转义字符也经常出现在字符串中，如你在一句话的末尾加一个\n，这时候就会换行，注意，这个时候\n是当做<strong>一个字符</strong>看待的，不是当做两个看待的。</p><h1 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h1><p>对字符数组的初始化。<br>如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;y&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> c[] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;y&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>如果花括号里面提供的字符个数大于规定的数组长度，则按<strong>语法错误处理</strong>。<br>如果花括号里面提供的字符个数小于规定的数组长度，则按顺序将这些初值赋给前面的那些元素，其余元素用<strong>空字符</strong>（’\0’）填充。</p><p>注意：==只能对字符数组的元素赋值，而不能用赋值语句对整个数组赋值==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>];</span><br><span class="line">c = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;y&#x27;</span>&#125;; <span class="comment">//错误，不能对整个数组一次性赋值，只有初始化的时候可以类似地这样做</span></span><br><span class="line">c[<span class="number">0</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">c[<span class="number">1</span>] = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">c[<span class="number">3</span>] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">c[<span class="number">4</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">c[<span class="number">5</span>] = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 这样是正确的</span></span><br></pre></td></tr></table></figure><p>如果已经有a和b两个数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = b; <span class="comment">// 错误，不能对整个数组整体赋值</span></span><br><span class="line">a[<span class="number">0</span>] = b[<span class="number">0</span>]; <span class="comment">// 正确，对数组元素赋值</span></span><br></pre></td></tr></table></figure><h1 id="字符数组的输入与输出"><a href="#字符数组的输入与输出" class="headerlink" title="字符数组的输入与输出"></a>字符数组的输入与输出</h1><p>两种方法：<br>1）逐个字符输入输出<br>2）将整个字符串一次输入或输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">20</span>];</span><br><span class="line">cin &gt;&gt; c;</span><br><span class="line">cout &lt;&lt; c;<span class="comment">// 输出整个字符串</span></span><br><span class="line">cout &lt;&lt; c[<span class="number">0</span>]; <span class="comment">//输出单个字符</span></span><br></pre></td></tr></table></figure><p>字符数组名代表字符数组的第一个元素c[0]的地址，执行 “cout &lt;&lt; c;” 的过程是从c所指向的数组的第一个元素开始<strong>逐个</strong>（自己往后跑，指针自行增加）输出字符，直到遇到’\0’为止。</p><p>注意：<br><strong>1）输出的字符不包括结束符’\0’</strong><br><strong>2）如果数组长度大于字符串实际长度，输出遇到‘\0’结束</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">10</span>] = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">cout &lt;&lt; c; <span class="comment">// 只输出ABC三个字符，而不是10个字符，这就是结束标志的作用</span></span><br></pre></td></tr></table></figure><p><strong>3）如果一个字符数组包含一个以上的‘\0’，则遇到第一个‘\0’时输出就结束</strong><br><strong>4）用cin从键盘输入一个字符串时，键盘键入的字符串长度应小于字符数组的长度，否则会出现问题</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[<span class="number">1</span>];</span><br><span class="line">cin &gt;&gt; c; <span class="comment">// 输入123</span></span><br><span class="line">cout &lt;&lt; c; <span class="comment">//输出123</span></span><br><span class="line"><span class="comment">/*系统不报错，也能正常输出，因为他将多余的字符放在了后面的字节里面，</span></span><br><span class="line"><span class="comment">这样有可能会破坏其他的数据，不安全，甚至可能出现无法估计的后果</span></span><br><span class="line"><span class="comment">所以一定要保证字符串长度小于字符数组长度*/</span></span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>字符串以’\0’作为<strong>结束的标志</strong>，在系统中，当遇到字符<strong>‘\0’</strong>就表示字符串到此结束了，由他前面的字符组成==有效的字符串==。</p><p>对于一个字符串常量，系统会自动在所有字符的后面加一个‘\0’作为结束符，然后再把他给存起来。<br>如：对字符串常量“ABC”，共有3个字符，但是他在内存里面却有4个字节，因为还有个‘\0’是系统自动加上的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> != <span class="string">&quot;a&quot;</span>; <span class="comment">//注意，前者有一个字a，占一个字节，后者有a和\0两个字符，占两个字节</span></span><br></pre></td></tr></table></figure><p>所以，在程序中常常依靠检测’\0’的位置来判断字符串是否结束，而不是根据字符数组规定的长度来决定字符串的长度。（注意：如果要用字符数组存字符串，一定要记得让字符数组长度<strong>大于</strong>字符串长度哦）</p><p>可以用字符串常量来初始化字符数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c[] = <span class="string">&quot;ABC&quot;</span>; <span class="comment">//注意两边是双撇号</span></span><br><span class="line"><span class="keyword">char</span> c[] = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;; <span class="comment">//第一行与这一行等价</span></span><br><span class="line"><span class="keyword">char</span> c[] = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;; <span class="comment">// 与这一行不等价</span></span><br></pre></td></tr></table></figure><p>说明：<strong>字符数组并不要求最后一个字符必须是‘\0’，可以不包括‘\0’，随程序设计者需要而定，但为了使字符串的处理方法一致（==遇到’\0’结束==），人们往往认为地在字符数组的最后加上一个’\0’。</strong></p><h2 id="字符串类"><a href="#字符串类" class="headerlink" title="字符串类"></a>字符串类</h2><p>字符数组操控字符串的方法太过麻烦，在字符串的运算中，一但字符串的长度超过了字符数组的长度，会带来不必要的危险，所以我们经常是用string来处理日常的字符串的。<br>在使用方法上，他和int，char一样，只不过你需要先：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><p>下面介绍运算：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line">string s1，s2; <span class="comment">// 定义字符串</span></span><br><span class="line">s1 = <span class="string">&quot;ABC&quot;</span>; <span class="comment">// 赋值</span></span><br><span class="line">s2 = s1; <span class="comment">// 赋值</span></span><br><span class="line"></span><br><span class="line">cin &gt;&gt; s1;</span><br><span class="line">cout &lt;&lt; s1; <span class="comment">// 输入与输出</span></span><br><span class="line"></span><br><span class="line">s1 = s2; <span class="comment">//字符串复制</span></span><br><span class="line">s1 = s1 + s2; <span class="comment">//字符串连接</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">length</span>(); <span class="comment">//输出字符串长度，还有其他的操作方法，请自行查找函数库</span></span><br><span class="line"><span class="comment">// 字符串比较直接用 &gt; &lt; &gt;= &lt;= == != 即可</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：string，cstring，和string.h的<strong>区别</strong></p><p>string是C++的==string类==。</p><p>cstring包含一些C字符串的==操作函数==，它里面有一些常用的C字符串处理函数，比如strcmp、strlen、strcpy、strcat之类的函数，它与原来的&lt;string.h&gt;对应。但cstring头文件的内容在名字空间std 中，而string.h不在。</p><p>==cstring里面的函数不能操作string对象==，string对象有它自己的函数来操作，cstring可以和纯字符串（“ABC”）或者字符数组玩耍。</p><p>下面引用一下别人关于头文件的说明并作了些增添：</p><blockquote><p>下面是C++头文件的现状：<br>(1)旧的C++头文件名如 &lt;iostream.h&gt;将会继续被支持，这些头文件的内容不在名字空间std 中。新的C++头文件如 iostream包含的基本功能和对应的旧头文件相同，但头文件的内容在名字空间std 中。（在标准化的过程中，库中有些部分的细节被修改了，所以旧头文件和新头文件中的实体不一定完全对应。）<br>(2)标准C 头文件如 &lt;stdio.h&gt;继续被支持。头文件的内容不在std 中。具有C 库功能的新C++头文件具有如 cstdio这样的名字。它们提供的内容和相应的旧C 头文件相同，只是内容在std 中。<br>前面加个c代表着它是继承标准c的头文件。</p></blockquote><p>==由于cin的输入会跳过空格，换行，tab符之类的空白字符，所以有时候会使用getline函数来进行输入==</p><p>当用getline函数进行输入操作时，对字符数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> name[Asize];</span><br><span class="line">   cin.<span class="built_in">getline</span>(name, Asize,<span class="string">&#x27;结束字符&#x27;</span>); <span class="comment">// 注意格式，一般第三个参数不输入的话默认为换行符</span></span><br></pre></td></tr></table></figure><blockquote><p>面向行的输入:istream&amp; getline(char *p, int n, char c)<br>getline()函数读取整行，它使用通过回车键输入的换行符来确定输入结尾。要调用这种方法，可以使用cin.getline()。该函数有两个参数。第一个参数是用来存储输入行的数组的名称，第二个参数是要读取的字符数量。如果参数是20，那么最多可以读取19个字符，余下的空间用于存储自动在结尾处添加的空字符。如果在读取n-1个字符之前遇到终止字符(第三个参数不写，默认为’\n’)，则提前结束。getline()成员函数在读取指定数目的字符或遇到换行符时停止读取。</p></blockquote><p>当用getline函数进行输入操作时，对字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string name;</span><br><span class="line">   <span class="built_in">getline</span>(cin, name);   <span class="comment">// 注意格式</span></span><br></pre></td></tr></table></figure><blockquote><p>getline(cin, inputLine)，其中cin是正在读取的输入流，而inputLine是接收输入字符串的string变量的名称。需要注意的是，它不是类方法。</p></blockquote><h2 id="get和getline的区别"><a href="#get和getline的区别" class="headerlink" title="get和getline的区别"></a>get和getline的区别</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">getline</span>(name, Asize,<span class="string">&#x27;结束字符&#x27;</span>);</span><br><span class="line">cin.<span class="built_in">get</span>(name, Asize,<span class="string">&#x27;结束字符&#x27;</span>);</span><br></pre></td></tr></table></figure><p>==getline<strong>不会保留</strong>结束字符在缓冲区，而get<strong>会保留</strong>结束字符在缓冲区==</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>];<span class="keyword">char</span> b;</span><br><span class="line">   cin.<span class="built_in">get</span>(a,<span class="number">10</span>,<span class="string">&#x27;,&#x27;</span>);<span class="comment">// get</span></span><br><span class="line">cin.<span class="built_in">get</span>(b);</span><br><span class="line">cout&lt;&lt;a&lt;&lt;endl&lt;&lt;b;</span><br><span class="line"><span class="comment">//输入12345，回车</span></span><br><span class="line"><span class="comment">//输出12345【换行】，</span></span><br><span class="line"><span class="comment">//注意，因为缓冲区里面还有逗号（结束字符），</span></span><br><span class="line"><span class="comment">//所以在get单个字符的时候，就直接把这个结束字符获取了</span></span><br><span class="line"><span class="comment">//cin.get(a,10,&#x27;,&#x27;)把12345到a中，遇到&#x27;,&#x27;结束，但是不把&#x27;,&#x27;删除，而把&#x27;,&#x27;输入到b中</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>];<span class="keyword">char</span> b;</span><br><span class="line">   cin.<span class="built_in">getline</span>(a,<span class="number">10</span>,<span class="string">&#x27;,&#x27;</span>); <span class="comment">//getline</span></span><br><span class="line">cin.<span class="built_in">get</span>(b);</span><br><span class="line">cout&lt;&lt;a&lt;&lt;endl&lt;&lt;<span class="built_in"><span class="keyword">int</span></span>(b);</span><br><span class="line"><span class="comment">//输入12345，回车</span></span><br><span class="line"><span class="comment">//输出12345【换行】10</span></span><br><span class="line"><span class="comment">//cin.getline(a,10,&#x27;,&#x27;)把12345输入到a中，遇到’，‘结束，并删除缓冲区的‘,’，</span></span><br><span class="line"><span class="comment">//后面的[enter]输入到b中</span></span><br><span class="line"><span class="comment">//回车的ascil码为10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeblocks编译运行c++文件显示“不支持的16位应用程序，与64位版本的Windows不兼容”的解决办法</title>
      <link href="/2020/03/19/codeblocks%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8Cc-%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E2%80%9C%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%8416%E4%BD%8D%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E4%B8%8E64%E4%BD%8D%E7%89%88%E6%9C%AC%E7%9A%84Windows%E4%B8%8D%E5%85%BC%E5%AE%B9%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/03/19/codeblocks%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8Cc-%E6%96%87%E4%BB%B6%E6%98%BE%E7%A4%BA%E2%80%9C%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%8416%E4%BD%8D%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%8C%E4%B8%8E64%E4%BD%8D%E7%89%88%E6%9C%AC%E7%9A%84Windows%E4%B8%8D%E5%85%BC%E5%AE%B9%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>有一天我想写一个东西来实现一下自己脑子里的思路，编译运行的时候却显示了这个东西<img src="https://img-blog.csdnimg.cn/20200319143305983.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plZ3JldA==,size_16,color_FFFFFF,t_70"><br>我上网查了很多，有人说应该把腾讯手游助手等腾讯的游戏软件卸载，可是等我卸载后却并没有解决问题。<br>后来，我突发奇想打开了以前写的cpp文件，发现他竟然能够编译运行！！！（卸载腾讯手游助手后）<br>我又创建了一个新的文件，发现竟然也能运行！！！<br>只有这一个cpp文件不能运行，于是我把这个cpp文件删除了，完美地解决了这个问题。</p><p>这可能因为腾讯手游助手等软件只要你运行过后，他就会修改你系统的某些东西。当你在  有腾讯手游助手  的背景下运行codeblocks的文件时，那么这个文件一但编译运行，他的内在就被修改了，即使你把腾讯手游助手卸载了，它也被修改了，所以这个文件就完了。（这就是一开始我以为卸载后没有解决问题的原因，因为我还在死扣那个坏文件）<br>但是当你把腾讯手游助手这类软件卸载了，再打开以前写的文件，由于他没有在 有腾讯手游助手  的背景下编译运行过，所以他没事，能够正常使用，同理，创建新文件能运行也是这个道理。<br>总的来说，应该就是腾讯手游助手这类软件为了游戏的正常使用而不得已修改一些系统的东西，造成了这个后果，将其卸载后再把不能运行的cpp（cbp）文件删除即可得到舒服的codeblocks使用环境了。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeblocks </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
